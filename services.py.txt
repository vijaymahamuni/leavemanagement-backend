import React, { useRef ,useState,useEffect} from "react";
import axios from "axios";
import "./sample_ticket.css";
import { styled } from '@mui/material/styles';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import { useNavigate ,useLocation, NavLink} from "react-router-dom";
import _ from "lodash";
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import Button from 'react-bootstrap/Button';
import 'bootstrap/dist/css/bootstrap.min.css';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import { Dropdown, DropdownButton } from 'react-bootstrap';
const StyledTableCell = styled(TableCell)(({ theme }) => ({
    [`&.${tableCellClasses.head}`]: {
    
      backgroundColor:'#003152',
      color: theme.palette.common.white,
      fontSize: 16,
    
    },
    [`&.${tableCellClasses.body}`]: {
      fontSize: 14,
    
      
      
    },
  }));
  let ImageLink = '';
  const StyledTableRow = styled(TableRow)(({ theme }) => ({
    '&:nth-of-type(odd)': {
      backgroundColor: theme.palette.action.hover,
    },
    // hide last border
    '&:last-child td, &:last-child th': {
      border: 0,
    },
  }));
  var limit = 2;
export default function SampleTickets_list() {
    const [ticket,setticket] = useState([])
    const [addNewemail,setaddNewemail]=useState('');
    const [Buffer,setBuffer]=useState(true);
    const [users_dropdown,setusers_dropdown]=useState([])
    const [Email_List,setEmail_List] = useState([{From_email:""}])
    const [Edit,setEdit]=useState()
    let Profileid=localStorage.getItem("proid",Profileid)
    let label='Own';
    const filter='None';
    const getUserdata = async (id,myArray) => {

       try {
     
        const response = axios({
          method: "post",
          url: `http://localhost:5000/TicketRise_listing`,
          data: {'employeeId': Profileid,'label_show':label,'filter_user':filter},
          headers: { 'Content-Type': 'application/json'},
    
        }).then(res=> {
        const ticket_data=(res.data.data);
        setticket(ticket_data)
        const ALlUSers_drpdown=res.data.allDrpdown_users;
        setusers_dropdown(ALlUSers_drpdown)
        console.log("AllUsersdropdown_value",ALlUSers_drpdown)
        console.log("hello saipallavi",ticket_data)
        setEmail_List(null)
        })
       console.log(response)
       
    
      } catch (error) {
        console.log(error)
      }
      }
      useEffect(() => {
        getUserdata();
      
      }, [])
      
    const navigate = useNavigate();
    const[navemail,setnavemail]=useState('')
    const handleEdit=async(id)=>{
        const data = await axios.get(`http://localhost:5000/ticketEdit/${id}`).then(res => {
        const edit_ticket=(res.data.ticket);
        const email_ticket=res.data.data;
        console.log("hellllllo vijay",email_ticket)
        setnavemail(email_ticket)
        let id = edit_ticket.map( (item) => item.id);
        let names = edit_ticket.map((item) => item.name);
        let subject = edit_ticket.map((item) => item.subject);
        let message = edit_ticket.map((item) => item.message);
        let email = edit_ticket.map((item) => item.email);
        let select_name=email_ticket.map((item)=>item.name);
        let select_mainid=email_ticket.map((item)=>item.id);
        let edit_name=names.toString();
        let edit_subject=subject.toString();
        let edit_message=message.toString();
        let edit_email=email.toString();
        let edit_mainid=select_mainid.toString();
        let edit_addname=select_name.toString();
        let edit_id=id.toString();
        console.log(edit_name)
        console.log(edit_subject)
        console.log(edit_message)
        console.log(edit_email)
        console.log("mmmmmmmmmmm",edit_addname)
        localStorage.setItem('name', edit_name)
        localStorage.setItem('subject', edit_subject)
        localStorage.setItem('message', edit_message)
        localStorage.setItem('id', edit_id)
        localStorage.setItem('addname',edit_addname)
        localStorage.setItem('mainid',edit_mainid)
        localStorage.setItem('Edit','test')
       

        
    })
    const datanavigate = await axios.get(`http://localhost:5000/ticketEdit/${id}`)
    .then(res => {
      console.log(res);
      let ticket_email=res.data.data;
      setaddNewemail(ticket_email)
      console.log("email",ticket_email)
      let email = ticket_email.map((item) => item.email);
      console.log("opEmail",email)
      let flag_data = ticket_email.map((item) => item.flag);
      let id = ticket_email.map((item) => item.id);
      const ticket_emailid=email
      console.log("email_datalast",ticket_emailid)
      localStorage.setItem("email_data",id)
      let mainEmailid=localStorage.setItem("Email_id",email)
      console.log("sampleTicketsService",mainEmailid)
      localStorage.setItem("flag",flag_data)
      
    })
    navigate("/user/contact_us", {state: addNewemail})
  }
    
  const tickets_del=(id)=>{
        
        axios.put(`http://localhost:5000/deleteTicketlist/${id}`)
        .then(() => {
          getUserdata();
        })
    }

  const AddTickets=()=>{
    navigate("/user/contact_us")
    localStorage.setItem('Edit', 'new')
  }  
  
const [refresh, setRefresh] = useState(false);

useEffect(() => {
  setTimeout(() => {
 
  setBuffer(false)

}, 2000)});

let TiketData_Array = ticket.map(item => {
  return {
    subject: item.subject,
    message: item.message,
  
   
  };
});
const [value, setValue] = React.useState(0);

const handleChange = (event, newValue) => {
  setValue(newValue);

};
const TabWiseRecords=async(label)=>{
     try {
     const response = axios({
          method: "post",
          url: `http://localhost:5000/TicketRise_listing`,
          data: {'employeeId': Profileid,'label_show':label,'filter_user':filter},
          headers: { 'Content-Type': 'application/json'},
    
        }).then(res=> {
          console.log(res.data.data);
      let desorting=res.data.data
      console.log("hello saipallavi",desorting)
      setticket(desorting)
        })
       console.log(response)
       
    
      } catch (error) {
        console.log(error)
      }

}
console.log("alertChack empty or not",ticket.length)
const Record_found=ticket.length;
const [showDropdowns, setShowDropdowns] = useState(false);

const toggleDropdowns = () => {
  setShowDropdowns(!showDropdowns);
};
const Submit_UsersDrop=()=>{
  try {
    const response = axios({
         method: "post",
         url: `http://localhost:5000/TicketRise_listing`,
         data: {'employeeId': Profileid,'label_show':label,'filter_user':sendfilter_id},
         headers: { 'Content-Type': 'application/json'},
   
       }).then(res=> {
         console.log(res.data.data);
     let user_filters=res.data.userwise_filter
     console.log("hello saipallavi",user_filters)
     setticket(user_filters)
       })
      console.log(response)
      
   
     } catch (error) {
       console.log(error)
     }

}
const [selectedUserId, setSelectedUserId] = useState('Users');
const [sendfilter_id,setsendfilter_id]=useState('')
  const handleUserSelect = (user) => {
    
   
    setSelectedUserId(user.firstname);
    setsendfilter_id(user.id)
  }
  return (
   <div >
    {Buffer ?(<div animation="border"  className="loader"/>):(
    <div className="tickets_head">
        <h3 className="heading_tic">Tickets Details</h3>
        <div className="Tabs_Tickets">
        <Tabs value={value}  onChange={handleChange} centered >
            <Tab label="Own"  onClick={() => TabWiseRecords("Own")} />
            <Tab label="Others"  onClick={() => TabWiseRecords("Others")} />
        </Tabs> 
      </div>
        {/* <ExcelExportButton  fileName="Tickets Data" Heading="Ticket Details" sheetHead="Tickets Data" identifier="TicketListPage"/> */}
        <TableContainer component={Paper} className="sampleliststl">
        <Table sx={{ minWidth: 700}} aria-label="customized table">
          <TableHead>
            <TableRow key={"item.id"}>
            <StyledTableCell >From</StyledTableCell>
            <StyledTableCell >Subject</StyledTableCell>
            <StyledTableCell >Message</StyledTableCell>
            <StyledTableCell >Status</StyledTableCell>
            <StyledTableCell>View</StyledTableCell>
              {/* <StyledTableCell >Delete</StyledTableCell> */}
              </TableRow>
          </TableHead>
          <TableBody>
            {ticket.map((item,index) => {
              return <StyledTableRow >
                <StyledTableCell >{item.firstname}</StyledTableCell>
                <StyledTableCell >{item.Subject}</StyledTableCell>
                <StyledTableCell >{item.Message}</StyledTableCell>
                <StyledTableCell ><Button className={item.status== 'pending' ?("pendingTicket_Active"):("Completed_acive")}>{item.status}</Button></StyledTableCell>
                <StyledTableCell  className="viewed" ><NavLink to={`/user/Ticketview/${item.id}`} className="Viewlink">View</NavLink ></StyledTableCell>

                {/* <StyledTableCell  className="deleted"><ModeEditOutlinedIcon type='submit'  onClick={() => handleEdit(item.id)}>Edit</ModeEditOutlinedIcon></StyledTableCell> */}
                {/* <StyledTableCell  className="deleted"><DeleteIcon onClick={() => tickets_del(item.id)} >Delete</DeleteIcon></StyledTableCell> */}
                </StyledTableRow>
              })}
          </TableBody>
          </Table>
        </TableContainer>
        {Record_found =='0'  ?(
    <div class="no-record">
      <p>No records found.</p>
    
    </div>):(<></>)}

    
   <Button variant="primary" id="Add_button"   onClick={AddTickets}>Add Tickets</Button>
   <div className="filter_container ">
      <Button  onClick={toggleDropdowns} className="dropdown_icons">Filter
      <KeyboardArrowDownIcon /> 
      </Button>
        
      
      {showDropdowns && (
        <div className="Overall_dropdownshowed">
         
      <DropdownButton id="dropdown1" title={selectedUserId}>
        {users_dropdown.map((user, index) => (
          <Dropdown.Item key={index} onClick={() => handleUserSelect(user)}>
            {user.firstname}
          </Dropdown.Item>
        ))}
      </DropdownButton>
    
    
          <DropdownButton id="dropdown2" title="Status">
            <Dropdown.Item href="#">pending</Dropdown.Item>
            <Dropdown.Item href="#">Completed</Dropdown.Item>
            
          </DropdownButton>
          <button className="btn btn-success mt-3" onClick={Submit_UsersDrop}>
            Submit
          </button>
          <button className="btn btn-danger mt-3" >
            Reset
          </button>
          {/* <button className="btn btn-danger mt-3" onClick={toggleDropdowns}>
            Close Dropdowns
          </button> */}
        </div>
      )}
    </div>
    </div>)}

    </div>
  )
}
